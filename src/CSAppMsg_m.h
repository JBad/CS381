//
// Generated file, do not edit! Created by nedtool 4.6 from CSAppMsg.msg.
//

#ifndef _CSAPPMSG_M_H_
#define _CSAPPMSG_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>CSAppMsg.msg:16</tt> by nedtool.
 * <pre>
 * enum BT_MSG_TYPE
 * {
 * 
 *     Tracker_REQUEST = 0;
 *     Tracker_RESPONSE = 1;
 *     Peer_INFO_REQUEST = 2;
 *     Peer_INFO_RESPONSE = 3;
 *     Peer_CHUNK_REQUEST = 4;
 *     Peer_CHUNK_RESPONSE = 5;
 * }
 * </pre>
 */
enum BT_MSG_TYPE {
    Tracker_REQUEST = 0,
    Tracker_RESPONSE = 1,
    Peer_INFO_REQUEST = 2,
    Peer_INFO_RESPONSE = 3,
    Peer_CHUNK_REQUEST = 4,
    Peer_CHUNK_RESPONSE = 5
};

/**
 * Class generated from <tt>CSAppMsg.msg:26</tt> by nedtool.
 * <pre>
 * packet BT_Packet
 * {
 *     int type @enum(BT_MSG_TYPE);  // our message type
 * }
 * </pre>
 */
class BT_Packet : public ::cPacket
{
  protected:
    int type_var;

  private:
    void copy(const BT_Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BT_Packet&);

  public:
    BT_Packet(const char *name=NULL, int kind=0);
    BT_Packet(const BT_Packet& other);
    virtual ~BT_Packet();
    BT_Packet& operator=(const BT_Packet& other);
    virtual BT_Packet *dup() const {return new BT_Packet(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doPacking(cCommBuffer *b, BT_Packet& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BT_Packet& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>CSAppMsg.msg:31</tt> by nedtool.
 * <pre>
 * packet Tracker_Req extends BT_Packet
 * {
 *     string id;		        // announce the requestor's ID
 * }
 * </pre>
 */
class Tracker_Req : public ::BT_Packet
{
  protected:
    opp_string id_var;

  private:
    void copy(const Tracker_Req& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Tracker_Req&);

  public:
    Tracker_Req(const char *name=NULL, int kind=0);
    Tracker_Req(const Tracker_Req& other);
    virtual ~Tracker_Req();
    Tracker_Req& operator=(const Tracker_Req& other);
    virtual Tracker_Req *dup() const {return new Tracker_Req(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
};

inline void doPacking(cCommBuffer *b, Tracker_Req& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Tracker_Req& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>CSAppMsg.msg:36</tt> by nedtool.
 * <pre>
 * packet Tracker_Resp extends BT_Packet
 * {
 *     string id;			// ID of the responder
 *     string peers[];
 * }
 * </pre>
 */
class Tracker_Resp : public ::BT_Packet
{
  protected:
    opp_string id_var;
    opp_string *peers_var; // array ptr
    unsigned int peers_arraysize;

  private:
    void copy(const Tracker_Resp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Tracker_Resp&);

  public:
    Tracker_Resp(const char *name=NULL, int kind=0);
    Tracker_Resp(const Tracker_Resp& other);
    virtual ~Tracker_Resp();
    Tracker_Resp& operator=(const Tracker_Resp& other);
    virtual Tracker_Resp *dup() const {return new Tracker_Resp(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
    virtual void setPeersArraySize(unsigned int size);
    virtual unsigned int getPeersArraySize() const;
    virtual const char * getPeers(unsigned int k) const;
    virtual void setPeers(unsigned int k, const char * peers);
};

inline void doPacking(cCommBuffer *b, Tracker_Resp& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Tracker_Resp& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>CSAppMsg.msg:42</tt> by nedtool.
 * <pre>
 * packet Peer_Packet
 * {
 *     int type @enum(BT_MSG_TYPE);
 * }
 * </pre>
 */
class Peer_Packet : public ::cPacket
{
  protected:
    int type_var;

  private:
    void copy(const Peer_Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Peer_Packet&);

  public:
    Peer_Packet(const char *name=NULL, int kind=0);
    Peer_Packet(const Peer_Packet& other);
    virtual ~Peer_Packet();
    Peer_Packet& operator=(const Peer_Packet& other);
    virtual Peer_Packet *dup() const {return new Peer_Packet(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doPacking(cCommBuffer *b, Peer_Packet& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Peer_Packet& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>CSAppMsg.msg:47</tt> by nedtool.
 * <pre>
 * packet Peer_InfoReq extends BT_Packet
 * {
 *     string id;
 * }
 * </pre>
 */
class Peer_InfoReq : public ::BT_Packet
{
  protected:
    opp_string id_var;

  private:
    void copy(const Peer_InfoReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Peer_InfoReq&);

  public:
    Peer_InfoReq(const char *name=NULL, int kind=0);
    Peer_InfoReq(const Peer_InfoReq& other);
    virtual ~Peer_InfoReq();
    Peer_InfoReq& operator=(const Peer_InfoReq& other);
    virtual Peer_InfoReq *dup() const {return new Peer_InfoReq(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
};

inline void doPacking(cCommBuffer *b, Peer_InfoReq& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Peer_InfoReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>CSAppMsg.msg:52</tt> by nedtool.
 * <pre>
 * packet Peer_InfoResp extends BT_Packet
 * {
 *     string id;
 *     int chunks[];
 * }
 * </pre>
 */
class Peer_InfoResp : public ::BT_Packet
{
  protected:
    opp_string id_var;
    int *chunks_var; // array ptr
    unsigned int chunks_arraysize;

  private:
    void copy(const Peer_InfoResp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Peer_InfoResp&);

  public:
    Peer_InfoResp(const char *name=NULL, int kind=0);
    Peer_InfoResp(const Peer_InfoResp& other);
    virtual ~Peer_InfoResp();
    Peer_InfoResp& operator=(const Peer_InfoResp& other);
    virtual Peer_InfoResp *dup() const {return new Peer_InfoResp(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
    virtual void setChunksArraySize(unsigned int size);
    virtual unsigned int getChunksArraySize() const;
    virtual int getChunks(unsigned int k) const;
    virtual void setChunks(unsigned int k, int chunks);
};

inline void doPacking(cCommBuffer *b, Peer_InfoResp& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Peer_InfoResp& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>CSAppMsg.msg:58</tt> by nedtool.
 * <pre>
 * packet Peer_ChunkReq extends BT_Packet
 * {
 *     string id;
 *     int chunk;
 * }
 * </pre>
 */
class Peer_ChunkReq : public ::BT_Packet
{
  protected:
    opp_string id_var;
    int chunk_var;

  private:
    void copy(const Peer_ChunkReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Peer_ChunkReq&);

  public:
    Peer_ChunkReq(const char *name=NULL, int kind=0);
    Peer_ChunkReq(const Peer_ChunkReq& other);
    virtual ~Peer_ChunkReq();
    Peer_ChunkReq& operator=(const Peer_ChunkReq& other);
    virtual Peer_ChunkReq *dup() const {return new Peer_ChunkReq(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
    virtual int getChunk() const;
    virtual void setChunk(int chunk);
};

inline void doPacking(cCommBuffer *b, Peer_ChunkReq& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Peer_ChunkReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>CSAppMsg.msg:64</tt> by nedtool.
 * <pre>
 * packet Peer_ChunkResp extends BT_Packet
 * {
 *     string id;
 *     char data[];
 * }
 * </pre>
 */
class Peer_ChunkResp : public ::BT_Packet
{
  protected:
    opp_string id_var;
    char *data_var; // array ptr
    unsigned int data_arraysize;

  private:
    void copy(const Peer_ChunkResp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Peer_ChunkResp&);

  public:
    Peer_ChunkResp(const char *name=NULL, int kind=0);
    Peer_ChunkResp(const Peer_ChunkResp& other);
    virtual ~Peer_ChunkResp();
    Peer_ChunkResp& operator=(const Peer_ChunkResp& other);
    virtual Peer_ChunkResp *dup() const {return new Peer_ChunkResp(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
    virtual void setDataArraySize(unsigned int size);
    virtual unsigned int getDataArraySize() const;
    virtual char getData(unsigned int k) const;
    virtual void setData(unsigned int k, char data);
};

inline void doPacking(cCommBuffer *b, Peer_ChunkResp& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Peer_ChunkResp& obj) {obj.parsimUnpack(b);}


#endif // ifndef _CSAPPMSG_M_H_

